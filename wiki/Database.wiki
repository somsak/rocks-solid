#labels Phase-Design
#database interface
= New database interface (v0.2) =
From the v0.1, I found that power on a machine does not really means that a machine will come up. The same also applied for power-down, if the machine goes malfunction. And this happened quite a lot if you have hundreds of nodes in cluster. 

So the new interface will be more or less like the same, with additional table
== Table Details ==
*host_activity table*
 * ID (auto-increment)
 * Hostname (VARCHAR(255) )
 * OnTime (DateTime)
 * OffTime (DateTime)
 * DESC (TEXT)
*host_event table*
 * ID (auto-increment)
 * Hostname (VARCHAR(255))
 * Event (Enum? Right now it's just on or off)
 * Time (DateTime)
 * Status (Enum? success or failed for now)
== Details ==
The code where it detect for online/offline hosts will be separated from main power control code. It will just log that host is up or down. The trigger table will contains power control that was done on a machine. power control code will log the time and event details in table first, then having host status checking code to update whether it's success or failed.

This way there will be no rouge entry, where host is power-on but is not really on, appeared in host_activity. Also, checking for failed node will be much easier (all node with status=failed means it is most likely to be a malfunction node).

= Database Interface (v0.1) =

Solid use database to log some of its activity. One of very importance thing is powersave log. This can later be used in monitoring tool.

Solid currently use sqlalchemy to communicate with RDBMS. SQLite is preferred database.

== Table Details ==
Table field
 * ID (auto-increment)
 * HostName (VARCHAR(255))
 * OnTime (DateTime)
 * OffTime (DateTime)
 * DESC (TEXT)

== Details ==
 # Query data from database (uniq, distinct). Only node that has only "up" record.
 # Synchronize with current list of online/offline hosts (update "down" on hosts that's down, leave the rest if the host already up)
 # Add host that's not in the list into database, leave "down" empty